1.Algoritma analizi veya diğer adıyla algoritma çözümlemesi, bilgisayar biliminde bir algoritmayı çalıştırabilmek için gereken kaynakların (zaman, yer gibi) miktarının tespiti için kullanılır.
Yazdığımız algoritmanın performansını bilmek isteriz, farklı algoritmalarla karşılaştırmak isteriz ve daha iyisi mümkün mü sorusuna ancak analiz yaparak cevap verebiliriz.
Problem çözümünde hangi yöntemin seçileceği, kullanılacak araçlar ve elde edilecek sonuçlar noktasında başarılı olunmasını sağlar.
big o notation ile yapabiliriz. 

2."using namespace std;

int find_smallest(int arr[], int n) {
    int smallest = INT_MAX;
    for (int i = 0; i < n; i++) {
        if (arr[i] < smallest) {
            smallest = arr[i];
        }
    }
}
    return smallest;"

3.Verilen kod doğrusal bir arama algoritması olduğundan, algoritmanın çalışma zaman giriş dizisinin boyutuna bağlıdır. Giriş dizisinin boyutunun N olduğunu varsayalım.

a) En İyi Durum:
En iyi durumda, hedef değer dizinin ilk elemanında bulunur, bu nedenle algoritmanın hedef değerin indeksini döndürmeden önce yalnızca bir karşılaştırma yapması gerekir. Bu nedenle, en iyi durum zaman karmaşıklığı O(1)'dir.

b) Ortalama Vaka:
Ortalama durumda, hedef değerin giriş dizisinde rastgele yerleştirildiğini varsayarız. Bu durumda, ortalama olarak, hedef değeri bulmadan önce giriş dizisindeki öğelerin yarısını incelememiz gerekir. Bu nedenle, ortalama vaka süresi karmaşıklığı O(N/2)'dir, bu da O(N)'ye basitleştirir.

c) En Kötü Durum:
En kötü durumda, hedef değer giriş dizisinde yoktur veya giriş dizisinin sonunda yer alır. Bu durumda, hedef değerin olmadığını belirlemeden veya dizinin sonunda bulmadan önce giriş dizisindeki her öğeyi incelememiz gerekir. Bu nedenle, en kötü durum zaman karmaşıklığı O(N)'dir.

En İyi Durum: O(1)
Ortalama Vaka: O(N)
En Kötü Durum: O(N)

4.#include <iostream>
#include <string>
using namespace std;

struct Student {
    string name;
    string surname;
    int number;
    string address;
};

int main() {
    Student students[5];


    students[0] = {"Cem", "Donmez", 5 tane sayi, "Konya"};
    students[1] = {"isim", "Donmez", ..., "adres"};
    students[2] = {"...", "soyisim", ..., "..."};
    students[3] = {"...", "...", ..., "..."};
    students[4] = {"...", "...", ..., "..."};


    for (int i = 0; i < 5; i++) {
        cout << "Student " << i+1 << ":" << endl;
        cout << "Name: " << students[i].name << endl;
        cout << "Surname: " << students[i].surname << endl;
        cout << "Number: " << students[i].number << endl;
        cout << "Address: " << students[i].address << endl << endl;
    }

    return 0;
}
